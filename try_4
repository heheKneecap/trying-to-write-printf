//header

#ifndef PRINTF_H
# define PRINTF_H

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <unistd.h>
#include <libft.h>
#include <stdbool.h>

typedef struct	s_flags
{
	int		width;
	int		star;
	int		type;
	int		minus;
	int		zero;
	int		dot;
}   t_flags;

int ft_printf(const char *str, ...)
int ft_isdigit(int c);
int ft_whats_zis(int c);
int ft_what_flag(int c);
int	ft_which_stuff(int c, t_flags flags, va_list args);
static int ft_do_stuff(const char *str, va_list args)
static int ft_what(const char *str, int i, t_flags *flags, va_list args);
static t_flags ft_flag(void);
char ft_putchar(char c);

#endif


//core

static t_flags ft_flag(void)
{
    t_flags flags;

    flags.width = 0;
    flags.star = 0;
    flags.type = 0;
    flags.minus = 0;
    flags.zero = 0;
    flags.dot = 1;
    return(flags);
}

static int  ft_what(const char *str, int i, t_flags *flags, va_list args)
{
	while (str[i])
	{
		if (!ft_isaconversion(str[i]) && !ft_isaflag(str[i])
		&& !ft_isdigit(str[i]))
			break ;
		if (str[i] == '0' && flags->width == 0 && flags->minus == 0)
			flags->zero = 1;
		if (str[i] == '*')
			*flags = ft_width_flag(args, *flags);
		if (str[i] == '.')
			i = ft_dot_flag(str, i, flags, args);
		if (str[i] == '-')
			*flags = ft_minus_flag(*flags);
		if (ft_isdigit(str[i]))
			*flags = ft_digit_flag(str[i], *flags);
		if (ft_isconversion(str[i]))
		{
			flags->type = str[i];
			break ;
		}
		i++;
	}
	return (i);
}

static int ft_do_stuff(const char *str, va_list args)
{
    int i;
    int count;
    t_flags flags;
    
    i = 0;
    count = 0;
    while (!0)
    {
        flags = ft_flag()
        if (!str[i])
            break;
        else if (str[i] != '%')
            count += ft_putchar(str[i + 1]);
        else if (str[i] == '%' && str[i + 1])
        {
            i = ft_what(str, i++, &flags, args);
            if (ft_whats_zis(str[i]))
                count += ft_which_stuff((char)flags.type, flags, args);
            else if (str[i])
                count += ft_putchar(str[i]);
        }
        i++;
    }
    return (count);
}

int ft_printf(const char *str, ...)
{
    va_list args;
    const char *stri;
    int count;

    count = 0;
    if (!(str = ft_strdup(str)))
    return(0);

    va_start(args, str);
    count  += ft  
}

//stuff

int ft_whats_zis(int c)
{
    return ((c == 'c') || (c == 's') || (c == 'p') || 
    (c == 'd') || (c == 'i') || (c == 'u') || 
    (c == 'x') || (c == 'X') || (c == '%'));
}

int ft_what_flag(int c)
{
    return ((c == '.') || (c == '*') || (c == '0') || 
    (c == '-') || (c == ' '));
}

int	ft_which_stuff(int c, t_flags flags, va_list args)
{
	int count;

	count = 0;
	if (c == 'c')
		count = ft_do_char(va_arg(args, int), flags);
	else if (c == '%')
		count += ft_do_percent(flags);
	else if (c == 'p')
		count = ft_do_pointer(va_arg(args, unsigned long long), flags);
	else if (c == 's')
		count = ft_do_string(va_arg(args, char *), flags);
	else if ((c == 'i') || (c == 'd'))
		count = ft_do_int(va_arg(args, int), flags);
	else if (c == 'x')
		count += ft_do_hex(va_arg(args, unsigned int), 1, flags);
	else if (c == 'X')
		count += ft_do_hex(va_arg(args, unsigned int), 0, flags);
	else if (c == 'u')
		count += ft_do_uint((unsigned int)va_arg(args, unsigned int), flags);
	return (count);
}
